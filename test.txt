.withColumn(
    "is_stress_day",
    F.when(
        (F.col("monthly_avg_balance") >= 0) & (F.col("balance") < 0.5 * F.col("monthly_avg_balance")), 1
    ).when(
        (F.col("monthly_avg_balance") < 0) & (F.col("balance") < 2 * F.col("monthly_avg_balance")), 1
    ).otherwise(0)
)


balance_monthly = balance_with_flags.groupBy("APPLICATION_ID", "month_diff").agg(
    F.avg("balance").alias("monthly_avg_balance"),
    F.min("balance").alias("monthly_min_balance"),
    F.max("balance").alias("monthly_max_balance"),
    F.stddev("balance").alias("monthly_balance_volatility"),
    F.sum(F.when(F.col("balance") < 0, 1).otherwise(0)).alias("num_days_negative_balance"),
    F.sum(F.when(F.col("balance") < 100, 1).otherwise(0)).alias("num_days_near_zero_balance"),
    (F.sum(F.when(F.col("balance") < F.col("monthly_avg_balance"), 1).otherwise(0)) / F.count("balance")).alias("pct_days_below_avg_balance"),
    (F.min("balance") / F.max("balance")).alias("min_max_balance_ratio"),
    F.sum("is_stress_day").alias("num_stress_days"),
    F.count("balance").alias("total_days")
).withColumn(
    "liquidity_stress_index_monthly",
    F.col("num_stress_days") / F.col("total_days")
)
